/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface SilverConquestFactoryInterface extends Interface {
  functions: {
    getOwner: TypedFunctionDescription<{ encode([]: []): string }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_newOwner]: [string]): string;
    }>;

    updateMintEntryRatio: TypedFunctionDescription<{
      encode([_newMintEntryRatio]: [BigNumberish]): string;
    }>;

    updateArcPrice: TypedFunctionDescription<{
      encode([_newPrice]: [BigNumberish]): string;
    }>;

    updateSilverCardsRange: TypedFunctionDescription<{
      encode([_minRange, _maxRange]: [BigNumberish, BigNumberish]): string;
    }>;

    withdraw: TypedFunctionDescription<{
      encode([_recipient]: [string]): string;
    }>;

    onERC1155Received: TypedFunctionDescription<{
      encode([_operator, _from, _id, _amount, _data]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    onERC1155BatchReceived: TypedFunctionDescription<{
      encode([, _from, _ids, _amounts]: [
        string,
        string,
        BigNumberish[],
        BigNumberish[],
        Arrayish
      ]): string;
    }>;

    batchMint: TypedFunctionDescription<{
      encode([_to, _ids, _amounts]: [
        string,
        BigNumberish[],
        BigNumberish[]
      ]): string;
    }>;

    getSkyweaverAssets: TypedFunctionDescription<{ encode([]: []): string }>;

    getMintEntryRatio: TypedFunctionDescription<{ encode([]: []): string }>;

    getArcPrice: TypedFunctionDescription<{ encode([]: []): string }>;

    getAvailableSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    getSilverCardsRange: TypedFunctionDescription<{ encode([]: []): string }>;

    supportsInterface: TypedFunctionDescription<{
      encode([interfaceID]: [Arrayish]): string;
    }>;
  };

  events: {
    ArcPriceChange: TypedEventDescription<{
      encodeTopics([oldPrice, newPrice]: [null, null]): string[];
    }>;

    IdRangeUpdated: TypedEventDescription<{
      encodeTopics([newRange]: [null]): string[];
    }>;

    MintEntryRatioChange: TypedEventDescription<{
      encodeTopics([oldRatio, newRatio]: [null, null]): string[];
    }>;

    NewTribute: TypedEventDescription<{
      encodeTopics([user, nEntries]: [null, null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class SilverConquestFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): SilverConquestFactory;
  attach(addressOrName: string): SilverConquestFactory;
  deployed(): Promise<SilverConquestFactory>;

  on(event: EventFilter | string, listener: Listener): SilverConquestFactory;
  once(event: EventFilter | string, listener: Listener): SilverConquestFactory;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): SilverConquestFactory;
  removeAllListeners(eventName: EventFilter | string): SilverConquestFactory;
  removeListener(eventName: any, listener: Listener): SilverConquestFactory;

  interface: SilverConquestFactoryInterface;

  functions: {
    getOwner(): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateMintEntryRatio(
      _newMintEntryRatio: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateArcPrice(
      _newPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateSilverCardsRange(
      _minRange: BigNumberish,
      _maxRange: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdraw(
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      _from: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      arg4: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    batchMint(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getSkyweaverAssets(): Promise<string>;

    getMintEntryRatio(): Promise<BigNumber>;

    getArcPrice(): Promise<BigNumber>;

    getAvailableSupply(): Promise<BigNumber>;

    getSilverCardsRange(): Promise<{ minID: BigNumber; maxID: BigNumber }>;

    supportsInterface(interfaceID: Arrayish): Promise<boolean>;
  };

  getOwner(): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateMintEntryRatio(
    _newMintEntryRatio: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateArcPrice(
    _newPrice: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateSilverCardsRange(
    _minRange: BigNumberish,
    _maxRange: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdraw(
    _recipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  onERC1155Received(
    _operator: string,
    _from: string,
    _id: BigNumberish,
    _amount: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    arg0: string,
    _from: string,
    _ids: BigNumberish[],
    _amounts: BigNumberish[],
    arg4: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  batchMint(
    _to: string,
    _ids: BigNumberish[],
    _amounts: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getSkyweaverAssets(): Promise<string>;

  getMintEntryRatio(): Promise<BigNumber>;

  getArcPrice(): Promise<BigNumber>;

  getAvailableSupply(): Promise<BigNumber>;

  getSilverCardsRange(): Promise<{ minID: BigNumber; maxID: BigNumber }>;

  supportsInterface(interfaceID: Arrayish): Promise<boolean>;

  filters: {
    ArcPriceChange(oldPrice: null, newPrice: null): EventFilter;

    IdRangeUpdated(newRange: null): EventFilter;

    MintEntryRatioChange(oldRatio: null, newRatio: null): EventFilter;

    NewTribute(user: null, nEntries: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimate: {
    getOwner(): Promise<BigNumber>;

    transferOwnership(_newOwner: string): Promise<BigNumber>;

    updateMintEntryRatio(_newMintEntryRatio: BigNumberish): Promise<BigNumber>;

    updateArcPrice(_newPrice: BigNumberish): Promise<BigNumber>;

    updateSilverCardsRange(
      _minRange: BigNumberish,
      _maxRange: BigNumberish
    ): Promise<BigNumber>;

    withdraw(_recipient: string): Promise<BigNumber>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      _from: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      arg4: Arrayish
    ): Promise<BigNumber>;

    batchMint(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[]
    ): Promise<BigNumber>;

    getSkyweaverAssets(): Promise<BigNumber>;

    getMintEntryRatio(): Promise<BigNumber>;

    getArcPrice(): Promise<BigNumber>;

    getAvailableSupply(): Promise<BigNumber>;

    getSilverCardsRange(): Promise<BigNumber>;

    supportsInterface(interfaceID: Arrayish): Promise<BigNumber>;
  };
}
